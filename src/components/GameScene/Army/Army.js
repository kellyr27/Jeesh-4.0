import React, { useRef, useEffect } from 'react';
import { useThree, useFrame } from '@react-three/fiber';
import { Vector2, Raycaster } from 'three';
import Soldier from './Soldier/Soldier';
import { useControls, folder } from 'leva';

const equalMeshes = (mesh1, mesh2) => {
    return mesh1.uuid === mesh2.uuid
}

const Army = ({
    armyNum, 
    hoveredSoldier, 
    setHoveredSoldier, 
    selectedSoldier, 
    setSelectedSoldier, 
    soldierDefaultColor, 
    soldierHoveredColor, 
    soldierSelectedColor, 
    soldierBlockedColor, 
    movingMode, 
    setMovingMode,
    currentSelectedPose, 
    setCurrentSelectedPose
}) => {
    const [soldier1Position, setSoldier1Position] = React.useState([0, 0, 0])
    const [soldier1Rotation, setSoldier1Rotation] = React.useState([0, 0, 0])

    // const [soldier2Position, setSoldier2Position] = React.useState([1, 1, 1])
    // const [soldier2Rotation, setSoldier2Rotation] = React.useState([0, 0, 0])

    // const [soldier3Position, setSoldier3Position] = React.useState([2, 2, 2])
    // const [soldier3Rotation, setSoldier3Rotation] = React.useState([0, 0, 0])

    // Update the Selected Soldiers color
    useEffect(() => {
        if (selectedSoldier) {
            selectedSoldier.material.color.set(soldierSelectedColor)
        }
    }, [selectedSoldier, soldierSelectedColor])

    const updateSelectedSoldierOnClick = (newSelectedSoldier) => {

        // First check if a Soldier has been selected
        if (newSelectedSoldier) {

            if (selectedSoldier) {
                if (!equalMeshes(newSelectedSoldier, selectedSoldier)) {
                    selectedSoldier.material.color.set(soldierDefaultColor)
                    setSelectedSoldier(newSelectedSoldier)
                }
                
            } else {
                setSelectedSoldier(newSelectedSoldier)
            }
        }
    }


    // TODO: Modify and fix the following code - Works but generated by Copilot
    const selectedSoldierRef = useRef();
    const hoveredSoldierRef = useRef();

    useEffect(() => {
        if (selectedSoldierRef.current) {
            selectedSoldierRef.current.material.color.set(soldierSelectedColor);
        }
    }, [selectedSoldier, soldierSelectedColor]);

    useEffect(() => {
        if (hoveredSoldierRef.current) {
            if (!selectedSoldier || (selectedSoldier && !equalMeshes(hoveredSoldierRef.current, selectedSoldier))) {
                hoveredSoldierRef.current.material.color.set(soldierHoveredColor);
            }
        }
    }, [hoveredSoldier, selectedSoldier, soldierHoveredColor]);

    const onPointerOverHandler = (e) => {
        const soldier = e.intersections[0].object;
        if (soldier) {
            hoveredSoldierRef.current = soldier;
            setHoveredSoldier(soldier);
        }
        e.stopPropagation();
    };

    const onPointerOutHandler = (e) => {
        if (hoveredSoldierRef.current) {
            if (!selectedSoldier || (selectedSoldier && !equalMeshes(hoveredSoldierRef.current, selectedSoldier))) {
                hoveredSoldierRef.current.material.color.set(soldierDefaultColor);
            }
        }
        hoveredSoldierRef.current = null;
        setHoveredSoldier(null);
        e.stopPropagation();
    };

    const onClickHandler = (e) => {
        const soldier = e.intersections[0].object;
        if (soldier) {
            if (selectedSoldierRef.current) {
                selectedSoldierRef.current.material.color.set(soldierDefaultColor);
            }
            selectedSoldierRef.current = soldier;
            setSelectedSoldier(soldier);
        }
        e.stopPropagation();
    };

    


    return (
        <group
            onPointerOver={onPointerOverHandler}
            onPointerOut={onPointerOutHandler}
            onClick={onClickHandler}
        >
            <Soldier 
                name={`Soldier_${armyNum}_1`} 
                index={0} 
                position={soldier1Position} 
                setPosition={setSoldier1Position}
                rotation={soldier1Rotation} 
                setRotation={setSoldier1Rotation}
                color={soldierDefaultColor}
                movingMode={movingMode}
                setMovingMode={setMovingMode}
                currentSelectedPose={currentSelectedPose}
                setCurrentSelectedPose={setCurrentSelectedPose}
            />
            {/* <Soldier name={`Soldier_${armyNum}_2`} index={1} position={soldier2Position} rotation={soldier2Rotation} color={soldierDefaultColor} />
            <Soldier name={`Soldier_${armyNum}_3`} index={2} position={soldier3Position} rotation={soldier3Rotation} color={soldierDefaultColor} /> */}
        </group>
    );
};

export default Army;